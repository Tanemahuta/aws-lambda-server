name: "verify"
on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tanemahuta/aws-lambda-server
  PLATFORMS: "linux/amd64,linux/arm64/v8"
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: checkout
        uses: actions/checkout@v3
      # Lint golang
      - name: setup go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          only-new-issues: true
      # Lint Dockerfile
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
      # Lint helm charts
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: List changed chart files
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }} || echo "failure")
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: checkout
        uses: actions/checkout@v3
      # Test golang
      - name: setup go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - name: ginkgo
        run: |
          go run github.com/onsi/ginkgo/v2/ginkgo -r --randomize-all --randomize-suites \
          --fail-on-pending --keep-going --trace \
          --cover --coverprofile=cover.profile \
          --json-report=test-report.json \
          --race --junit-report=test-report.xml \
          ./... 
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          files: cover.profile
      # Test helm chart
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0
      - name: List changed chart files
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}
      # Build docker file
      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ env.PLATFORMS }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      # Build and export Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and export to Docker
        id: build-and-export
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          push: false
          build-args: VERSION=${{ github.ref_name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
